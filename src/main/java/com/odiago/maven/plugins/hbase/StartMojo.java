// (c) Copyright 2011 Odiago, Inc.

package com.odiago.maven.plugins.hbase;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;

/**
 * A maven goal that starts a mini HBase cluster in a new daemon thread.
 *
 * <p>A new daemon thread is created that starts a mini HBase cluster.  The main thread
 * blocks until the HBase cluster has full started.  The daemon thread with the
 * in-process HBase cluster will continue to run in the background until stopped by the
 * 'stop' goal of the plugin.</p>
 *
 * <p>The configuration of the started mini HBase cluster will be written to a
 * hbase-site.xml file in the test classpath ('${basedir}/target/test-classes' by
 * default).  The path to the generated configuration file may be customized with the
 * 'hbaseSiteFile' property</p>
 *
 * @goal start
 * @phase pre-integration-test
 */
public class StartMojo extends AbstractMojo {
  /**
   * The file that will store the configuration required connect to the started mini HBase
   * cluster.  This file will be generated by the goal.
   *
   * @parameter property="hbaseSiteFile" expression="${hbase.site.file}" default-value="${project.build.testOutputDirectory}/hbase-site.xml"
   * @required
   */
  private File mHBaseSiteFile;

  /**
   * Sets the file that we should write the HBase cluster configuration to.
   *
   * <p>Note: The property "hbaseSiteFile" defined in this mojo means this method must be
   * named setHbaseSiteFile instead of setHBaseSiteFile.</p>
   *
   * @param hbaseSiteFile The file we should write to.
   */
  public void setHbaseSiteFile(File hbaseSiteFile) {
    mHBaseSiteFile = hbaseSiteFile;
  }

  /**
   * Starts a mini HBase cluster in a new thread.
   *
   * <p>This method is called by the maven plugin framework to run the goal.</p>
   *
   * @throws MojoExecutionException If there is a fatal error during this goal's execution.
   */
  @Override
  public void execute() throws MojoExecutionException {
    try {
      MiniHBaseClusterSingleton.INSTANCE.startAndWaitUntilReady(getLog());
    } catch (IOException e) {
      throw new MojoExecutionException("Unable to start HBase cluster.", e);
    }

    // Get the HBase configuration.
    Configuration conf = MiniHBaseClusterSingleton.INSTANCE.getClusterConfiguration();

    // Create an hbase conf file to write.
    File parentDir = mHBaseSiteFile.getParentFile();
    if (null != parentDir && !parentDir.exists() && !parentDir.mkdirs()) {
      throw new MojoExecutionException(
          "Unable to create hbase conf file: " + mHBaseSiteFile.getPath());
    }

    // Write the file.
    FileOutputStream fileOutputStream = null;
    try {
      fileOutputStream = new FileOutputStream(mHBaseSiteFile);
      conf.writeXml(fileOutputStream);
    } catch (IOException e) {
      throw new MojoExecutionException(
          "Unable to write to hbase conf file: " + mHBaseSiteFile.getPath(), e);
    } finally {
      if (null != fileOutputStream) {
        try {
          fileOutputStream.close();
        } catch (IOException e) {
          throw new MojoExecutionException(
              "Unable to close hbase conf file stream: " + mHBaseSiteFile.getPath(), e);
        }
      }
    }
    getLog().info("Wrote " + mHBaseSiteFile.getPath() + ".");
  }
}
